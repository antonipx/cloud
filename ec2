#!/bin/bash -e

: ${type:="t2.medium"}
: ${data_size="100"}
: ${data_type:="gp2"}
: ${data_iops:=""}
: ${boot_size:="60"}
: ${zone:="us-west-1a"}
: ${ami:="ami-925144f2"}
: ${key:="askey"}
: ${script:="run/ubuntu-run.sh"}
: ${subnet:="subnet-1c34085a"}
: ${owner:="as"}
: ${user:="ubuntu"}

usage() { echo "Usage: $0 $(gawk '/^\s*[a-z]*)/ { gsub(/)/,""); gsub(/\s/, "");  printf("|%s", $0); } END { printf("|\n") }' $0) <name>"; exit 1; } 
check() { [ -x "$(command -v $1)" ] || { echo "Error: $1 is not installed, aborting"; exit 1; } }
for cmd in aws jq; do check $cmd; done

case $1 in
    create)
        [ $# -ne 2 ] && usage
        tmp=$(mktemp)
        cat $script > $tmp
        echo "sed -i\"\" \"s/127.0.0.1 localhost/127.0.0.1 localhost ${2:?USAGE: Name not specified}/\" /etc/hosts" >> $tmp
        echo "hostnamectl set-hostname ${2}" >> $tmp
        bdm="[{\"DeviceName\":\"/dev/sda1\",\"Ebs\":{\"VolumeSize\":${boot_size},\"DeleteOnTermination\":true}}"
        l=({e..z}); n=0;
        for d in ${data_size}; do bdm="${bdm},{\"DeviceName\":\"/dev/xvd${l[$((n+=1))]}\",\"Ebs\":{\"VolumeSize\":${d},\"VolumeType\":\"${data_type}\",${data_iops:+\"Iops\":$data_iops,}\"DeleteOnTermination\":true}}";  done
        bdm="${bdm}]"
        #echo $bdm;exit
        aws ec2 run-instances --count 1 \
            --instance-type $type --image-id $ami  \
            --key-name $key \
            --user-data file://$tmp \
            --subnet-id $subnet \
            --block-device-mappings ${bdm} \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$2},{Key=Owner,Value=${owner}}]"  \
            | jq -r '.Instances[].InstanceId' 
            #| xargs -r aws ec2 describe-instances --instance-ids  \
            #| jq -r '.Reservations[].Instances[].PublicIpAddress,.Reservations[].Instances[].InstanceId'
        rm -f $tmp
        set +e
        until $0 ssh $2 '[ -f /var/lib/cloud/instance/boot-finished ]' &>/dev/null; do sleep 20; done
        ;;
    delete)
        ID=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values=${2:?USAGE: Name not specified} \
            --query 'Reservations[].Instances[].[InstanceId]' \
            --output text )
        aws ec2  terminate-instances --instance-ids ${ID:?Instance Not Found}
        ;;
    getip)
        aws ec2 describe-instances \
            --filters Name=tag:Name,Values=${2:?USAGE: Name not specified} \
            --query 'Reservations[].Instances[].[PublicIpAddress,Tags[?Key==`Name`].Value[]]' \
            --output text | sed '$!N;s/\n/ : /'    
        ;;
    describe)
        aws ec2 describe-instances --filters Name=tag:Name,Values=${2:?USAGE: Name not specified} 
        ;;
    ssh)
        IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=${2:?USAGE: Name not specified} --query 'Reservations[].Instances[].[PublicIpAddress]' --output text)
        shift 2
        ssh ${sshopt} -t ${user}@${IP:?Unable to find instance} $@
        ;;
    list)
        aws ec2 describe-instances --filters Name=tag:Owner,Values=${owner} \
        --query 'Reservations[].Instances[].[PublicIpAddress,InstanceId,Tags[?Key==`Name`].Value[]]' --output text \
        | sed '$!N;s/\n/ /' \
        | awk -v s=$2 '{ if($1 !~ /None/ && $3 ~ s) print $3, $2, $1 }' \
        | sort 
        ;;
    addvol)
        [ $# -ne 2 ] && usage
        ID=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values=$2 \
            --query 'Reservations[].Instances[].[InstanceId]' \
            --output text )
        echo ${ID:?Instance ID Not Found}
        aws ec2 create-volume --availability-zone $zone --size ${data_size} --volume-type ${data_type} ${data_iops:+--iops $data_iops} \
        --tag-specifications "ResourceType=volume,Tags=[{Key=Name,Value=${owner}vol},{Key=Owner,Value=${owner}}]" \
        | jq '.VolumeId' \
        | { sleep 15; cat; } \
        | xargs -r aws ec2  attach-volume --device /dev/xvdf --instance-id ${ID} --volume-id 
        ;;
    addmulvol)
        [ $# -ne 2 ] && usage
        ID=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values=$2 \
            --query 'Reservations[].Instances[].[InstanceId]' \
            --output text )
        echo ${ID:?Instance ID Not Found}
        for dev in f h i j k l
        do
            aws ec2 create-volume --availability-zone $zone --size ${data_size} --volume-type ${data_type} ${data_iops:+--iops $data_iops} \
            --tag-specifications "ResourceType=volume,Tags=[{Key=Name,Value=${owner}vol},{Key=Owner,Value=${owner}}]" \
            | jq '.VolumeId' \
            | { sleep 15; cat; } \
            | xargs -r aws ec2  attach-volume --device /dev/xvd${dev} --instance-id ${ID} --volume-id 
        done
        ;;
    setup)
        apt -yq install python3-pip
        pip3 install --upgrade pip
        pip3 install -U botocore
        pip3 install -U awscli
        ;;
    config)
        aws configure
        ;;
    *)
        usage
        ;;
esac

