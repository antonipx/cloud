#!/bin/bash -e

: ${type:="t2.medium"}
: ${data_size="100"}
: ${data_type:="gp2"}
: ${data_iops:=""}
: ${boot_size:="60"}
: ${ostype:="ubuntu"}
: ${region:="us-west-2"}
: ${zone:="a"}
: ${key:="askey"}
: ${script:="run/${ostype}-run.sh"}
: ${owner:="as"}
: ${user:="ubuntu"}
: ${boot_dev:="/dev/sda1"}


usage() { echo "Usage: $0 $(gawk '/^\s*[a-z]*)/ { gsub(/)/,""); gsub(/\s/, "");  printf("|%s", $0); } END { printf("|\n") }' $0) <name>"; exit 1; } 
check() { [ -x "$(command -v $1)" ] || { echo "Error: $1 is not installed, aborting"; exit 1; } }
for cmd in aws jq; do check $cmd; done

set -o pipefail

case $1 in
    create)
        [ $# -ne 2 ] && usage
        tmp=$(mktemp)
        set +e; cat $script > $tmp; set -e
        [ "${ostype}" != "coreos" ] && echo "sed -i\"\" \"s/127.0.0.1 localhost/127.0.0.1 localhost ${2:?USAGE: Name not specified}/\" /etc/hosts" >> $tmp
        [ "${ostype}" != "coreos" ] && echo "hostnamectl set-hostname ${2}" >> $tmp
        bdm="[{\"DeviceName\":\"${boot_dev}\",\"Ebs\":{\"VolumeSize\":${boot_size},\"DeleteOnTermination\":true}}"
        l=({e..z}); n=0;
        for d in ${data_size}; do bdm="${bdm},{\"DeviceName\":\"/dev/xvd${l[$((n+=1))]}\",\"Ebs\":{\"VolumeSize\":${d},\"VolumeType\":\"${data_type}\",${data_iops:+\"Iops\":$data_iops,}\"DeleteOnTermination\":true}}";  done
        bdm="${bdm}]"
        #echo ${bdm}
        
        aws ec2 run-instances --count 1 \
            --instance-type ${type} \
            --region ${region} \
            --placement "AvailabilityZone=${region}${zone}" \
            --image-id "$(${0} getami ${ostype})" \
            --key-name ${key} \
            --user-data file://${tmp} \
            --block-device-mappings ${bdm} \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$2},{Key=Owner,Value=${owner}}]"  \
            | jq -r '.Instances[].InstanceId' 

        rm -f $tmp
        $0 bootwait ${2} ${ostype}
        ;;
    delete)
        ID=$($0 getid ${2:?USAGE: Name not specified})
        aws ec2  terminate-instances --region ${region} --instance-ids ${ID:?Instance Not Found}
        ;;
    start)
        ID=$($0 getid ${2:?USAGE: Name not specified})
        aws ec2 start-instances --region ${region} --instance-ids ${ID:?Instance Not Found}
        ;;
    stop)
        ID=$($0 getid ${2:?USAGE: Name not specified})
        aws ec2 stop-instances --region ${region} --instance-ids ${ID:?Instance Not Found}
        ;;
    getid)
        aws ec2 describe-instances \
            --region ${region} \
            --filters Name=tag:Name,Values=${2:?USAGE: Name not specified} \
            --query 'Reservations[].Instances[].[InstanceId]' \
            --output text
        ;;
    getip)
        aws ec2 describe-instances \
            --region ${region} \
            --filters Name=tag:Name,Values=${2:?USAGE: Name not specified} \
            --query 'Reservations[].Instances[].[PublicIpAddress][]' \
            --output text
        ;;
    describe)
        aws ec2 describe-instances --region ${region} --filters Name=tag:Name,Values=${2:?USAGE: Name not specified} 
        ;;
    ssh)
        IP=$($0 getip ${2:?USAGE: Name not specified})
        shift 2
        ssh ${sshopt} -t ${user}@${IP:?Unable to find instance} $@
        ;;
    bootwait)
        set +e
        case ${3:?USAGE: os type not specified} in 
            coreos)
                # systemctl status sysinit.target
                until user=core $0 ssh ${2:?USAGE: Name not specified} 'systemd-analyze' &>/dev/null; do sleep 10; done
                ;;
            ubuntu)
                until user=ubuntu $0 ssh ${2:?USAGE: Name not specified} '[ -f /var/lib/cloud/instance/user-init-finished ]' &>/dev/null; do sleep 10; done
                ;;
            *)
                until user=ec2-user $0 ssh ${2:?USAGE: Name not specified} '[ -f /var/lib/cloud/instance/user-init-finished ]' &>/dev/null; do sleep 10; done
                ;;
        esac
        ;;
    list)
        aws ec2 describe-instances --region ${region} --filters Name=tag:Owner,Values=${owner} --output json \
        | jq '.Reservations[].Instances[] | select(.State.Name != "terminated") | { Name: (.Tags[]|select(.Key=="Name")|.Value), St:.State.Name, Id:.InstanceId, IP:.PublicIpAddress } | join(" : ") ' | tr -d \"
        ;;
    addvol)
        ID=$($0 getid ${2:?USAGE: Name not specified})
        l=(/dev/xvd{d..z})
        n="$(aws ec2 describe-instances --region ${region} --instance-ids ${ID} --query 'Reservations[].Instances[].BlockDeviceMappings[].DeviceName' --output json | jq '.[]' | wc -l)"
        for dev in ${data_size};
        do 
            aws ec2 create-volume --region ${region} --availability-zone "${region}${zone}" --size ${d} --volume-type ${data_type} ${data_iops:+--iops $data_iops} \
            --tag-specifications "ResourceType=volume,Tags=[{Key=Name,Value=${owner}vol},{Key=Owner,Value=${owner}}]" \
            | jq '.VolumeId' \
            | { sleep 15; cat; } \
            | xargs -r aws ec2  attach-volume --device "${l[$((n+=1))]}" --instance-id ${ID} --volume-id 
        done
        ;;
    setup)
        apt -yq install python3-pip
        pip3 install --upgrade pip
        pip3 install -U botocore
        pip3 install -U awscli
        ;;
    config)
        aws configure
        ;;
    getami)
        case $2 in
            ubuntu)
                aws ec2 describe-images --region ${region} \
                --filters 'Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-????????' 'Name=state,Values=available' \
                | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'
                ;;
            coreos)
                aws ec2 describe-images --region ${region} \
                --filters 'Name=name,Values=CoreOS-stable-*-hvm' 'Name=state,Values=available' \
                | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'
                ;;
            rhel)
                aws ec2 describe-images --region ${region} \
                --filters 'Name=name,Values=RHEL-7.5_HVM_GA*' 'Name=state,Values=available' \
                | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'
                ;;
            centos)
                aws ec2 describe-images --region ${region} \
                --filters 'Name=name,Values=CentOS7.5' 'Name=state,Values=available' \
                | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'
                ;;
            amazon2)
                aws ec2 describe-images --region ${region} --owners amazon \
                --filters 'Name=name,Values=amzn2-ami-hvm-2.0.????????-x86_64-gp2' 'Name=state,Values=available' \
                | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'
                ;;
            amazon)
                aws ec2 describe-images --region ${region} --owners amazon --filters 'Name=name,Values=amzn-ami-hvm-????.??.?.x86_64-gp2' 'Name=state,Values=available' \
                | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'
                ;;
            ami-*)
                echo ${2}
            ;;
            *)
                echo "Unknown OS Type"
            ;;
        esac
        ;;
    *)
        usage
        ;;
esac

