#!/bin/bash -e

: ${ESX_HOST:="70.0.0.67"}
: ${ESX_USER:="root"}
: ${ESX_PATH:="/vmfs/volumes/HDD"}

: ${cpus:="2"}
: ${mem:="4096"}
: ${data_size:="100"}
: ${owner:="as"}
: ${type:="ubuntu-64"}
: ${template:="/vmfs/volumes/HDD/ubuntu_template/ubuntu_template_0.vmdk"}
: ${script:="ubuntu-run.sh"}
: ${user:="ubuntu"}
: ${pass:="ubuntu"}

usage() { echo "Usage: $0 $(gawk '/^\s*[a-z]*)/ { gsub(/)/,""); gsub(/\s/, "");  printf("|%s", $0); } END { printf("|\n") }' $0) <name>"; exit 1; }
check() { [ -x "$(command -v $1)" ] || { echo "Error: $1 is not installed, aborting"; exit 1; } }
for cmd in ssh scp sshpass; do check $cmd; done

case $1 in
    create)
        name=${2:?No VM name specified}
        {
            echo "mkdir ${ESX_PATH}/${name}"
            echo "cat  > \"${ESX_PATH}/${name}/${name}.vmx\" <<EOF"
            echo "config.version = \"8\""
            echo "virtualHW.version = \"13\""
            echo "vmci0.present = \"TRUE\""
            echo "numvcpus = \"${cpus}\""
            echo "memSize = \"${mem}\""
            echo "bios.bootDelay = \"0\""
            echo "bios.bootRetry.delay = \"10\""
            echo "usb.present = \"TRUE\""
            echo "scsi0.virtualDev = \"pvscsi\""
            echo "scsi0.present = \"TRUE\""
            echo "scsi0:0.present = \"TRUE\""
            echo "scsi0:0.deviceType = \"scsi-hardDisk\""
            echo "scsi0:0.fileName = \"${name}_0.vmdk\""
            [ "$data_size" ] && {
                n=1
                for d in $data_size
                do
                    echo "scsi0:${n}.present = \"TRUE\""
                    echo "scsi0:${n}.deviceType = \"scsi-hardDisk\""
                    echo "scsi0:${n}.fileName = \"${name}_${n}.vmdk\""
                    let n+=1
                done
            }
            echo "ehci.present = \"TRUE\""
            echo "ethernet0.virtualDev = \"vmxnet3\""
            echo "ethernet0.networkName = \"VM Network\""
            echo "ethernet0.addressType = \"generated\""
            echo "ethernet0.present = \"TRUE\""
            echo "displayName = \"${name}\""
            echo "guestinfo.hostname = \"${name}\""
            echo "guestOS = \"${type}\""
            echo "tools.syncTime = \"TRUE\""
            echo "cleanShutdown = \"TRUE\""
            echo "hpet0.present = \"TRUE\""
            echo "svga.present = \"TRUE\""
            echo "pciBridge0.present = \"TRUE\""
            echo "pciBridge4.present = \"TRUE\""
            echo "pciBridge4.virtualDev = \"pcieRootPort\""
            echo "pciBridge4.functions = \"8\""
            echo "pciBridge5.present = \"TRUE\""
            echo "pciBridge5.virtualDev = \"pcieRootPort\""
            echo "pciBridge5.functions = \"8\""
            echo "pciBridge6.present = \"TRUE\""
            echo "pciBridge6.virtualDev = \"pcieRootPort\""
            echo "pciBridge6.functions = \"8\""
            echo "pciBridge7.present = \"TRUE\""
            echo "pciBridge7.virtualDev = \"pcieRootPort\""
            echo "pciBridge7.functions = \"8\""
            echo "pciBridge0.pciSlotNumber = \"17\""
            echo "pciBridge4.pciSlotNumber = \"21\""
            echo "pciBridge5.pciSlotNumber = \"22\""
            echo "pciBridge6.pciSlotNumber = \"23\""
            echo "pciBridge7.pciSlotNumber = \"24\""
            echo "scsi0.pciSlotNumber = \"160\""
            echo "usb.pciSlotNumber = \"32\""
            echo "ethernet0.pciSlotNumber = \"192\""
            echo "ehci.pciSlotNumber = \"33\""
            echo "vmci0.pciSlotNumber = \"34\""
            echo "softPowerOff = \"FALSE\""
            echo "nvram = \"${name}.nvram\""
            echo "annotation = \"owner=${owner}\""
            echo "EOF"
            echo "vmkfstools -i ${template} \"${ESX_PATH}/${name}/${name}_0.vmdk\" -d thin"
            [ "$data_size" ] && {
                n=1
                for d in $data_size
                do
                    echo "vmkfstools -c \"${d}GB\" -d thin \"${ESX_PATH}/${name}/${name}_${n}.vmdk\""
                    let n+=1
                done
            }
            echo "ID=\$(vim-cmd solo/registervm \"${ESX_PATH}/${name}/${name}.vmx\")"
            echo "vim-cmd vmsvc/power.on \$ID"
        } | ssh -T ${ESX_USER}@${ESX_HOST}
        until [ "$IP" ]; do IP=$($0 getip ${name}); echo "Waiting for IP..."; sleep 15; done
        ssh-keygen -R ${IP}
        sshpass -p ${pass} ssh-copy-id ${user}@${IP}
        scp run/${script} ${user}@${IP}:/tmp
        {
            echo "sudo -i"
            echo "passwd -l ${user}"
            echo "h=\$(vmware-rpctool \"info-get guestinfo.hostname\")"
            echo "hostnamectl set-hostname \$h"
            echo "echo -e \"127.0.0.1\t\$h\" >> /etc/hosts"
            echo "chmod 755 /tmp/${script}"
            echo "/tmp/${script}"
        } | ssh -t ${user}@${IP} 
        ;;
    delete)
        {
            echo "ID=\$(vim-cmd vmsvc/getallvms | awk '{ if (\$2 ~ /${2:?No VM name specified}/) print \$1 }')"
            echo "vim-cmd vmsvc/power.off \${ID:?VM Not found}"
            echo "vim-cmd vmsvc/destroy \$ID"
        } | ssh -T ${ESX_USER}@${ESX_HOST} 
        ;;
    start)
        echo "vim-cmd vmsvc/getallvms | awk '{ if (\$2 ~ /${2:?No VM name specified}/) print \$1 }' | xargs -r vim-cmd vmsvc/power.on" | ssh -T ${ESX_USER}@${ESX_HOST} 
        ;;
    stop)
        echo "vim-cmd vmsvc/getallvms | awk '{ if (\$2 ~ /${2:?No VM name specified}/) print \$1 }' | xargs -r vim-cmd vmsvc/power.shutdown" | ssh -T ${ESX_USER}@${ESX_HOST} 
        ;;
    halt)
        echo "vim-cmd vmsvc/getallvms | awk '{ if (\$2 ~ /${2:?No VM name specified}/) print \$1 }' | xargs -r vim-cmd vmsvc/power.off" | ssh -T ${ESX_USER}@${ESX_HOST} 
        ;;
    getip)
        echo "vim-cmd vmsvc/getallvms | awk '{ if (\$2 ~ /${2:?No VM name specified}/) print \$1 }' | xargs -r vim-cmd vmsvc/get.summary \$ID | awk -F \\\" '/ipAddress/ { print \$2 }'" | ssh -T ${ESX_USER}@${ESX_HOST} 
        ;;
    ssh)
        IP=$(${0} getip ${2:?No VM name specified})
        shift 2
        ssh -t ${user}@${IP} ${@}
        ;;
    list)
        echo "vim-cmd vmsvc/getallvms | awk '{ if(int(\$1) > 0 && \$NF ~ /owner=${owner}/) print \$2 }'" | ssh -T ${ESX_USER}@${ESX_HOST} 
        ;;
    setup)
        cat ~/.ssh/id_rsa.pub | ssh -T ${ESX_USER}@${ESX_HOST}  "cat >> /etc/ssh/keys-root/authorized_keys"
        ;;
    *)
        usage
        ;;
esac

